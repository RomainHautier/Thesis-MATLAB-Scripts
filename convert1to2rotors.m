%% This function is build to convert the inputs from HeliUM and FW standalone
%% rotor cases into a dissimilar rotor case in the mfw mrtr. The files IWGEOM,
%% IWG_b & flap are being concatenated and saved into the corresponding mrtr directory.

function state = convert1to2rotors(speed, file_combination, turns)
    % Defining filepaths needed for the entire process. 
    % Here, if:
    %   - file_combination == 'H' in the function inputs, the MR controls
    %   and CT are read from the flight.input file generated by the HeliUM
    %   run.
    %   - file_combination == 'F' in the function inputs, the MR controls
    %   are read from the timeflightmodified.dat file, extracted from the
    %   standalone FW MR rotor runs.
    
    if file_combination == 'H'
        % Since HeliUM only performs 4 turns of freewake for the Main Rotor
        % this needs to be adjusted to select the correct TR FW solution.
        turns = 4; 
    end

    hel = ['C:\Users\hauti\heliumx2\HeliUM.sample\uh60a_fw_' num2str(speed) 'kt\'];
    FW_MR = ['C:\Users\hauti\heli-fwmrtr2\MyCasesNew-' num2str(turns) 'turns\MR\t' num2str(speed) '\'];
    FW = ['C:\Users\hauti\heli-fwmrtr2\MyCasesNew-' num2str(turns) 'turns\TR\t'  num2str(speed) '\'];
    
    % Defining the speed array at which the TR CT must be retrieved.
    speeds = [1 5:5:100];
    speed_index = find(speed == speeds);
    load("CTs_TR.mat");
    load("CTs_MR.mat");
    %% Concatenating the FWGEOM.dat, IWG_B.dat,
    for i = 1:3
        
        % Define the filepaths.
        if i == 1
            filename = 'FWGEOM.DAT';
            filenameout = 'IWGEOM';
        elseif i == 2
            filename = 'FWG_b.DAT';
            filenameout = 'IWG_b';
        else
            filename = 'flap.DAT';
            filenameout = 'flap';
        end
        
        if file_combination == 'H'
            if i == 3
                filepath_MR = [hel filename 'A'];
            else
                filepath_MR = [hel filename];
            end
            outputDir = ['C:\Users\hauti\heli-fwmrtr2\MyCases2rot\d' num2str(speed)];

        elseif file_combination == 'F'
            filepath_MR = [FW_MR filename];
            outputDir = ['C:\Users\hauti\heli-fwmrtr2\MyCases2rotFW\' num2str(turns) 'turns\d' num2str(speed)];
        end
        filepath_FW = [FW filename];
        filepath_MR
        filepath_FW
        
        outputFile = fullfile(outputDir, [filenameout '.DATA']);
    
        % Check if the output directory exists, create it if it doesn't
        if ~exist(outputDir, 'dir')
            mkdir(outputDir);
        end
    
        % Open the files
        fid1 = fopen(filepath_MR, 'rt');
        fid2 = fopen(filepath_FW, 'rt');
        fidOut = fopen(outputFile, 'wt');
        
        % Read the content of the first file and write it to the output file
        while ~feof(fid1)
            line = fgets(fid1);
            fprintf(fidOut, '%s', line);
        end
        
        % Read the content of the second file and write it to the output file
        while ~feof(fid2)
            line = fgets(fid2);
            fprintf(fidOut, '%s', line);
        end
    
        % Close the files
        fclose(fid1);
        fclose(fid2);
        fclose(fidOut);
        
        fprintf('Files concatenated successfully and saved to %s\n', outputFile);
    
    end

state = 'File Concatenation Done'


    %% Defining the flight.input files for the two rotor case from that of HeliUM.
    if file_combination == 'H'
        fid3 = fopen([hel 'flight.input'], 'rt');
        outputFile = fullfile(outputDir, 'flight.input'); 
        fidOut = fopen(outputFile, 'wt');
    
        % Copying the flight.input file from HeliUM to the mrtr directory,
        % making sure the erase the 'rbar' line (the linecounter does that).
    
        MRcontrols = {};
        linecounter = 1;
    
        while ~feof(fid3)
            if linecounter == 6
                line = fgets(fid3);
            else
                if linecounter > 7 && linecounter <= 14
                    MRcontrols{end+1} = line;
                end
                line = fgets(fid3);
                fprintf(fidOut, '%s', line);
            end
            linecounter = linecounter + 1;
        end
    
        fclose(fid3);
        fclose(fidOut);
    elseif file_combination == 'F'
        [~, ~, ~, ~, ~, ~, ~, ~, MRcontrols] = importtimeflight(speed, ['C:\Users\hauti\heli-fwmrtr2\MyCasesNew-' num2str(turns) 'turns\MR\t'],'');
        MRcontrols = MRcontrols';
    end
    %% Writing to mrtr file
    % Initialize an array to store numeric values
    mrtrMR = zeros(length(MRcontrols), 1);
    
    if file_combination == 'H'
        for i = 0:length(MRcontrols)-1
            % Extract the numeric value part of the string
            parts = strsplit(MRcontrols{i+1}, '=');
            valueStr = strtrim(parts{2});
            
            % Remove the trailing comma
            valueStr = strrep(valueStr, ',', '');
            
            % Replace 'D' with 'E' to convert to MATLAB scientific notation
            valueStr = strrep(valueStr, 'D', 'E');
            
            % Convert the string to a numeric value
            mrtrMR(i+1) = str2double(valueStr);
        end
    elseif file_combination == 'F'
        mrtrMR = [CTs_MR(speed_index); MRcontrols];
    end
    
    % Converting the MR control angles from deg to rad for them to be
    % readbale by the FW in case the MR controls come from helium.

    if file_combination == 'H'
        mrtrMR(2:end) = deg2rad(mrtrMR(2:end));
    end
    % Define the format for displaying numbers in decimal notation
    formatSpec = '%.6f';  % Change this to control the number of decimal places

    % Convert numeric values to strings in decimal notation
    formattedLines = arrayfun(@(x) sprintf(formatSpec, x), mrtrMR, 'UniformOutput', false);

    % Join the formatted values with spaces (or any other delimiter)
    newcontent = strjoin(formattedLines, '\n');

    % Display the resulting numeric matrix
    disp('Converted numeric matrix:');
    disp(mrtrMR);
    disp('New content with correct line breaks:');
    disp(newcontent);


    % Reading the original mrtr file in the directory & storing it before
    % closing it.
    mrtrcontrol_notrim_in = fopen([outputDir '\mrtrcontrol_notrim.INPUT'], 'rt');
    % Read all lines into a cell array
    fileContent = textscan(mrtrcontrol_notrim_in, '%s', 'Delimiter', '\n');
    fclose(mrtrcontrol_notrim_in);

    % Convert cell array to a string array for easier manipulation
    fileContent = string(fileContent{1});
    newcontent = strsplit(newcontent, '\n');

    % Replacing the 7 first lines of the original mrtr document by the MR
    % controls from the HeliUM runs.
    for i = 1:7
        fileContent(i) = newcontent{i};
    end
    [~, ~, ~, ~, ~, ~, ~, ~, TRcontrolangles] = importtimeflight(speed, ['C:\Users\hauti\heli-fwmrtr2\MyCasesNew-' num2str(turns) 'turns\TR\t'], '')
    fileContent(8:14)
    TRcontrolangles'
    fileContent(8) = CTs_TR(speed_index);
    fileContent(9:14) = num2str(TRcontrolangles')
    % Opening the new instance of the mrtr file and writing the new content
    % to it.
    mrtrcontrol_notrim_out = fopen([outputDir '\mrtrcontrol_notrim.input'], 'wt');
    fprintf(mrtrcontrol_notrim_out, '%s\n', fileContent);
    fclose(mrtrcontrol_notrim_out);

end